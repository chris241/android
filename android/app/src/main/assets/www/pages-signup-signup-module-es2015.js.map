{"version":3,"sources":["./src/app/pages/signup/signup.page.html","./src/app/pages/signup/signup.module.ts","./src/app/pages/signup/signup.page.scss","./src/app/pages/signup/signup.page.ts","./src/app/services/user/user.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,iNAAkJ,8BAA8B,qMAAqM,4BAA4B,sMAAsM,2BAA2B,oMAAoM,uBAAuB,6LAA6L,0BAA0B,8QAA8Q,+BAA+B,kG;;;;;;;;;;;;;;;;;;;;;;;ACAjzC;AACN;AACI;AACU;AACV;AACS;AACX;AAE3C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,uDAAU;KACtB;CACF,CAAC;AAMF,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;CAAG;AAAnB,gBAAgB;IAJ5B,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,EAAE,0DAAW,EAAE,0DAAW,EAAE,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,mEAAe,CAAC;QACjG,YAAY,EAAE,CAAC,uDAAU,CAAC;KAC3B,CAAC;GACW,gBAAgB,CAAG;AAAH;;;;;;;;;;;;;ACnB7B;AAAe,6GAA8C,+I;;;;;;;;;;;;;;;;;;;;ACAX;AACc;AACT;AACU;AAOjE,IAAa,UAAU,GAAvB,MAAa,UAAU;IAwBrB,YACS,aAA4B,EAC5B,WAAwB,EACxB,eAAgC,EAChC,gBAAkC;QAHlC,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAiB;QAChC,qBAAgB,GAAhB,gBAAgB,CAAkB;QA3B3C,yCAAyC;QACzC,YAAO,GAOH;YACF,KAAK,EAAE,EAAE;YACT,KAAK,EAAE,EAAE;YACT,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;YACZ,OAAO,EAAE,IAAI;SACd,CAAC;QAcA,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,wBAAwB,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YAChI,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,YAAY,CAAC;YAC7C,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,cAAc,CAAC;YACjD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC;YACpD,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ,KAAI,CAAC;IAEb,QAAQ;QACN,6BAA6B;QAC7B,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QACxC,+CAA+C;QAC/C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAC7C,GAAS,EAAE,CAAC;YACV,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC9C,OAAO,EAAE,IAAI,CAAC,mBAAmB;gBACjC,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YACH,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC,GACD,CAAM,QAAQ,EAAC,EAAE,CAAC;YAChB,oBAAoB;YACpB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACzC,IAAI,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC;YAC1C,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAClE,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC;aACvC;iBAAM,IACL,QAAQ,CAAC,MAAM,KAAK,GAAG;gBACvB,KAAK,CAAC,OAAO,KAAK,kBAAkB;gBACpC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,UAAU;gBACzC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,MAAM,EACvC;gBACA,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC;aAC1C;YACD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC9C,OAAO,EAAE,YAAY;gBACrB,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,QAAQ;aACnB,CAAC,CAAC;YACH,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC,EACF,CAAC;IACJ,CAAC;CACF;;YAnDyB,4DAAa;YACf,8EAAW;YACP,8DAAe;YACd,oEAAgB;;AA5BhC,UAAU;IALtB,+DAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,kNAAiC;;KAElC,CAAC;2EA0BwB,4DAAa;QACf,8EAAW;QACP,8DAAe;QACd,oEAAgB;GA5BhC,UAAU,CA4EtB;AA5EsB;;;;;;;;;;;;;;;;;;;;;;ACVoB;AACO;AACX;AACuB;AACR;AAKtD,IAAa,WAAW,GAAxB,MAAa,WAAW;IAGtB,YAAmB,UAA0B,EAAS,YAA0B;QAA7D,eAAU,GAAV,UAAU,CAAgB;QAAS,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAEpF;;;OAGG;IACH,KAAK,CAAC,WAAgB;QACpB,IAAI,CAAC,YAAY;aACd,KAAK,CAAC,WAAW,CAAC;aAClB,IAAI,CAAC,GAAG,CAAC,EAAE;YACV,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,+CAAE,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE;YACX,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAC5B,OAAO,uDAAU,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,WAAgB;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,EAAE,YAAY,EAAE,MAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,4DAAK,EAAE,CAAC,CAAC;IACzG,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,QAAQ,CAAC,IAAI;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACxB,CAAC;CACF;;YA7CgC,yEAAc;YAAuB,iEAAY;;AAHrE,WAAW;IAHvB,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;2EAI+B,yEAAc,EAAuB,iEAAY;GAHrE,WAAW,CAgDvB;AAhDuB","file":"pages-signup-signup-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>{{ 'SIGNUP_TITLE' | translate }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n  <form (submit)=\\\"doSignup()\\\">\\n    <ion-list>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">{{ 'FIRST_NAME' | translate }}</ion-label>\\n        <ion-input type=\\\"string\\\" [(ngModel)]=\\\"account.firstName\\\" name=\\\"firstName\\\"></ion-input>\\n      </ion-item>\\n\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">{{ 'LAST_NAME' | translate }}</ion-label>\\n        <ion-input type=\\\"string\\\" [(ngModel)]=\\\"account.lastName\\\" name=\\\"lastName\\\"></ion-input>\\n      </ion-item>\\n\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">{{ 'EMAIL' | translate }}</ion-label>\\n        <ion-input type=\\\"email\\\" [(ngModel)]=\\\"account.email\\\" name=\\\"email\\\"></ion-input>\\n      </ion-item>\\n\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\">{{ 'PASSWORD' | translate }}</ion-label>\\n        <ion-input type=\\\"password\\\" [(ngModel)]=\\\"account.password\\\" name=\\\"password\\\"></ion-input>\\n      </ion-item>\\n\\n      <ion-row class=\\\"ion-padding\\\">\\n        <ion-col>\\n          <ion-button expand=\\\"block\\\" type=\\\"submit\\\" color=\\\"primary\\\">{{ 'SIGNUP_BUTTON' | translate }}</ion-button>\\n        </ion-col>\\n      </ion-row>\\n    </ion-list>\\n  </form>\\n</ion-content>\\n\"","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SignupPage } from './signup.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignupPage\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, RouterModule.forChild(routes), TranslateModule],\n  declarations: [SignupPage]\n})\nexport class SignupPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NpZ251cC9zaWdudXAucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { NavController, ToastController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { UserService } from 'src/app/services/user/user.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.page.html',\n  styleUrls: ['./signup.page.scss']\n})\nexport class SignupPage implements OnInit {\n  // The account fields for the signup form\n  account: {\n    login: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    password: string;\n    langKey: string;\n  } = {\n    login: '',\n    email: '',\n    firstName: '',\n    lastName: '',\n    password: '',\n    langKey: 'en'\n  };\n\n  // Our translated text strings\n  private signupErrorString: string;\n  private signupSuccessString: string;\n  private existingUserError: string;\n  private invalidPasswordError: string;\n\n  constructor(\n    public navController: NavController,\n    public userService: UserService,\n    public toastController: ToastController,\n    public translateService: TranslateService\n  ) {\n    this.translateService.get(['SIGNUP_ERROR', 'SIGNUP_SUCCESS', 'EXISTING_USER_ERROR', 'INVALID_PASSWORD_ERROR']).subscribe(values => {\n      this.signupErrorString = values.SIGNUP_ERROR;\n      this.signupSuccessString = values.SIGNUP_SUCCESS;\n      this.existingUserError = values.EXISTING_USER_ERROR;\n      this.invalidPasswordError = values.INVALID_PASSWORD_ERROR;\n    });\n  }\n\n  ngOnInit() {}\n\n  doSignup() {\n    // set login to same as email\n    this.account.login = this.account.email;\n    // Attempt to login in through our User service\n    this.userService.signup(this.account).subscribe(\n      async () => {\n        const toast = await this.toastController.create({\n          message: this.signupSuccessString,\n          duration: 3000,\n          position: 'top'\n        });\n        toast.present();\n      },\n      async response => {\n        // Unable to sign up\n        const error = JSON.parse(response.error);\n        let displayError = this.signupErrorString;\n        if (response.status === 400 && error.type.includes('already-used')) {\n          displayError = this.existingUserError;\n        } else if (\n          response.status === 400 &&\n          error.message === 'error.validation' &&\n          error.fieldErrors[0].field === 'password' &&\n          error.fieldErrors[0].message === 'Size'\n        ) {\n          displayError = this.invalidPasswordError;\n        }\n        const toast = await this.toastController.create({\n          message: displayError,\n          duration: 3000,\n          position: 'middle'\n        });\n        toast.present();\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { AuthApiService } from '../auth/api/auth-api.service';\nimport { LoginService } from '../login/login.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private user: any;\n\n  constructor(public apiService: AuthApiService, public loginService: LoginService) {}\n\n  /**\n   * Send a POST request to our login endpoint with the data\n   * the user entered on the form.\n   */\n  login(accountInfo: any) {\n    this.loginService\n      .login(accountInfo)\n      .then(res => {\n        this.loggedIn(res);\n        return of(res);\n      })\n      .catch(err => {\n        console.error('ERROR', err);\n        return throwError(err);\n      });\n  }\n\n  findAll(): Observable<any> {\n    return this.apiService.get('users');\n  }\n\n  /**\n   * Send a POST request to our signup endpoint with the data\n   * the user entered on the form.\n   */\n  signup(accountInfo: any) {\n    return this.apiService.post('register', accountInfo, { responseType: 'text' as 'text' }).pipe(share());\n  }\n\n  /**\n   * Log the user out, which forgets the session\n   */\n  logout() {\n    this.loginService.logout();\n    this.user = null;\n  }\n\n  /**\n   * Process a login/signup response to store user data\n   */\n  private loggedIn(resp) {\n    this.user = resp.user;\n  }\n}\n"],"sourceRoot":"webpack:///"}